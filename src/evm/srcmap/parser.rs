use std::{
    collections::HashMap,
    fmt::{Display, Formatter},
    fs::File,
    io::Read,
};

use itertools::Itertools;
use serde::{Deserialize, Serialize};

use crate::evm::types::{EVMAddress, ProjectSourceMapTy};

pub static mut BASE_PATH: String = String::new();

#[derive(Debug, Clone, Serialize, Hash, PartialEq, Eq)]
pub struct SourceMapWithCode {
    pub file: String,
    pub start: usize,
    pub end: usize,
    pub code: String,
}

impl Display for SourceMapWithCode {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "@ {} ({}-{}):\n{}", self.file, self.start, self.end, self.code)
    }
}

#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct SourceMapLocation {
    pub file: Option<String>,
    pub file_idx: Option<usize>,
    pub offset: usize,
    pub length: usize,
    pub pc_has_source_match: bool,
}

impl SourceMapLocation {
    pub fn new(file: Option<String>, file_idx: Option<usize>, offset: usize, length: usize) -> Self {
        Self {
            file,
            file_idx,
            offset,
            length,
            pc_has_source_match: false,
        }
    }
}

pub enum SourceMapAvailability {
    Available(SourceMapWithCode),
    Unavailable,
    Unknown,
}

pub fn read_source_code(
    loc: &SourceMapLocation,
    file_blob: &Vec<(String, String)>,
    whole_line: bool,
) -> SourceMapWithCode {
    let offset = loc.offset;
    let length = loc.length;
    let file_name = match loc.file {
        Some(ref file) => file.clone(),
        None => {
            return SourceMapWithCode {
                file: "None".to_string(),
                start: 0,
                end: 0,
                code: "code not available".to_string(),
            };
        }
    };

    let mut contents = String::new();
    let bad_file = SourceMapWithCode {
        file: file_name.clone(),
        start: offset,
        end: length,
        code: "code not available".to_string(),
    };

    if !file_blob.is_empty() && file_blob.iter().any(|(name, _)| name == &file_name) {
        let (_, code) = file_blob.iter().find(|(name, _)| name == &file_name).unwrap();
        contents = code.clone();
    } else {
        let mut file = match File::open(unsafe { BASE_PATH.clone() } + file_name.as_str()) {
            Ok(f) => f,
            Err(_e) => {
                return bad_file;
            }
        };
        file.read_to_string(&mut contents).unwrap();
    }

    let code = match contents.get(offset..offset + length) {
        Some(code) => code.to_string(),
        None => {
            return bad_file;
        }
    };

    if !whole_line {
        return SourceMapWithCode {
            file: file_name,
            start: offset,
            end: offset + length,
            code,
        };
    }

    // get starting and ending line number
    let mut line_number = 1;
    let mut start_line = 0;
    let mut end_line = 0;

    for (i, c) in contents.chars().enumerate() {
        if i == offset {
            start_line = line_number;
        }
        if i == offset + length {
            end_line = line_number;
            break;
        }
        if c == '\n' {
            line_number += 1;
        }
    }
    if end_line == 0 {
        end_line = line_number;
    }

    let lines_in_range = contents
        .lines()
        .skip(start_line)
        .take(end_line - start_line + 1)
        .join("\n");

    SourceMapWithCode {
        file: file_name,
        start: start_line,
        end: end_line,
        code: lines_in_range,
    }
}

pub fn pretty_print_source_map(pc: usize, addr: &EVMAddress, data: &ProjectSourceMapTy) -> SourceMapAvailability {
    match data.get(addr) {
        Some(Some(contract_data)) => pretty_print_source_map_single(pc, contract_data, &vec![]),
        _ => SourceMapAvailability::Unavailable,
    }
}

pub fn pretty_print_source_map_single(
    pc: usize,
    data: &HashMap<usize, SourceMapLocation>,
    file_blob: &Vec<(String, String)>,
) -> SourceMapAvailability {
    match data.get(&pc) {
        Some(info) => match info.file {
            Some(ref _file) => SourceMapAvailability::Available(read_source_code(info, file_blob, true)),
            None => SourceMapAvailability::Unknown,
        },
        None => SourceMapAvailability::Unknown,
    }
}

pub fn uncompress_srcmap_single(
    map: String,
    files: &Vec<String>,
    replacements: &[(String, String)],
) -> Vec<SourceMapLocation> {
    let mut results: Vec<SourceMapLocation> = vec![];
    let replacement_map = replacements
        .iter()
        .map(|(a, b)| (a.clone(), b.clone()))
        .collect::<HashMap<String, String>>();

    for (counter, part) in map.split(';').enumerate() {
        let parts = part.split(':').collect::<Vec<&str>>();
        let parts_len = parts.len();

        let has_offset = parts_len > 0 && !parts[0].is_empty();
        let has_length = parts_len > 1 && !parts[1].is_empty();
        let has_file = parts_len > 2 && !parts[2].is_empty();
        let has_jump = parts_len > 3 && !parts[3].is_empty();

        let has_everything = has_offset && has_length && has_file && has_jump;

        if counter == 0 && !has_everything {
            results.push(SourceMapLocation::default());
        } else {
            let mut file_idx = if has_file {
                let idx = parts[2].parse::<usize>().unwrap_or(usize::MAX);
                if idx < files.len() {
                    Some(idx)
                } else {
                    None
                }
            } else {
                results[counter - 1].file_idx
            };
            let mut file = if has_file {
                let idx = parts[2].parse::<usize>().unwrap_or(usize::MAX);
                if idx < files.len() {
                    Some(files[idx].clone())
                } else {
                    None
                }
            } else {
                results[counter - 1].file.clone()
            };

            let mut offset = if has_offset && let Ok(res) = parts[0].parse::<usize>() {
                res
            } else {
                results[counter - 1].offset
            };

            let mut length = if has_length && let Ok(res) = parts[1].parse::<usize>() {
                res
            } else {
                results[counter - 1].length
            };

            if let Some(fidx) = file_idx {
                if let Some(replacement) = replacement_map.get(&format!("{}:{}:{}", offset, length, fidx)) {
                    let parts = replacement.split(':').collect::<Vec<&str>>();
                    if parts.len() == 3 {
                        file_idx = Some(parts[0].parse::<usize>().unwrap_or(usize::MAX));
                        if let Some(idx) = file_idx &&
                            idx < files.len()
                        {
                            file = Some(files[idx].clone());
                        } else {
                            file = None;
                        }
                        offset = parts[1].parse::<usize>().unwrap_or(usize::MAX);
                        length = parts[2].parse::<usize>().unwrap_or(usize::MAX);
                    }
                }
            }

            results.push(SourceMapLocation::new(file, file_idx, offset, length))
        }
    }

    results
}

pub fn decode_instructions(bytecode: Vec<u8>, map: String, files: &Vec<String>) -> HashMap<usize, SourceMapLocation> {
    let mut results: HashMap<usize, SourceMapLocation> = Default::default();
    let uncompressed_map = uncompress_srcmap_single(map, files, &[]);
    let bytecode_len = bytecode.len();

    let mut idx = 0;
    let mut srcmap_idx = 0;

    loop {
        if idx >= bytecode_len {
            break;
        }
        let opcode = bytecode[idx];
        let srcmap = uncompressed_map.get(srcmap_idx);
        if let Some(srcmap) = srcmap {
            results.insert(idx, srcmap.clone());
        }

        match opcode {
            0x60..=0x7f => {
                idx += opcode as usize - 0x5e;
            }
            _ => {
                idx += 1;
            }
        }

        srcmap_idx += 1;
    }
    results
}

pub fn decode_instructions_with_replacement(
    bytecode: Vec<u8>,
    replacements: &[(String, String)],
    map: String,
    files: &Vec<String>,
) -> HashMap<usize, SourceMapLocation> {
    let mut results: HashMap<usize, SourceMapLocation> = Default::default();
    let uncompressed_map = uncompress_srcmap_single(map, files, replacements);
    let bytecode_len = bytecode.len();

    let mut idx = 0;
    let mut srcmap_idx = 0;

    loop {
        if idx >= bytecode_len {
            break;
        }
        let opcode = bytecode[idx];
        let srcmap = uncompressed_map.get(srcmap_idx);
        if let Some(srcmap) = srcmap {
            results.insert(idx, srcmap.clone());
        }

        match opcode {
            0x60..=0x7f => {
                idx += opcode as usize - 0x5e;
            }
            _ => {
                idx += 1;
            }
        }

        srcmap_idx += 1;
    }
    results
}

#[cfg(test)]
mod tests {
    use tracing::debug;

    use super::*;

    #[test]
    fn test_decode_instruction() {
        let res = decode_instructions(
            hex::decode("608060405234801561001057600080fd5b506004361061002b5760003560e01c8063051ee71f14610030575b600080fd5b61004a600480360381019061004591906104b8565b610060565b6040516100579190610595565b60405180910390f35b6060600083836000818110610078576100776105b7565b5b905060200201602081019061008d919061061f565b60ff16036100d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c790610698565b60405180910390fd5b6000838360018181106100e6576100e56105b7565b5b90506020020160208101906100fb919061061f565b60ff160361013e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013590610704565b60405180910390fd5b600083836002818110610154576101536105b7565b5b9050602002016020810190610169919061061f565b60ff16036101ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a390610770565b60405180910390fd5b6004838360038181106101c2576101c16105b7565b5b90506020020160208101906101d7919061061f565b60ff161461021a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610211906107dc565b60405180910390fd5b6005838360048181106102305761022f6105b7565b5b9050602002016020810190610245919061061f565b60ff1614610288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027f90610848565b60405180910390fd5b60058383600581811061029e5761029d6105b7565b5b90506020020160208101906102b3919061061f565b60ff16146102f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ed906108b4565b60405180910390fd5b60078383600681811061030c5761030b6105b7565b5b9050602002016020810190610321919061061f565b60ff1614610364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035b90610920565b60405180910390fd5b60088383600781811061037a576103796105b7565b5b905060200201602081019061038f919061061f565b60ff16146103d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c99061098c565b60405180910390fd5b6103da610418565b6040518060400160405280600f81526020017f48656c6c6f20436f6e7472616374730000000000000000000000000000000000815250905092915050565b60003373ffffffffffffffffffffffffffffffffffffffff1660001b90506020590181815262133337602082a15050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261047857610477610453565b5b8235905067ffffffffffffffff81111561049557610494610458565b5b6020830191508360208202830111156104b1576104b061045d565b5b9250929050565b600080602083850312156104cf576104ce610449565b5b600083013567ffffffffffffffff8111156104ed576104ec61044e565b5b6104f985828601610462565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561053f578082015181840152602081019050610524565b60008484015250505050565b6000601f19601f8301169050919050565b600061056782610505565b6105718185610510565b9350610581818560208601610521565b61058a8161054b565b840191505092915050565b600060208201905081810360008301526105af818461055c565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff82169050919050565b6105fc816105e6565b811461060757600080fd5b50565b600081359050610619816105f3565b92915050565b60006020828403121561063557610634610449565b5b60006106438482850161060a565b91505092915050565b7f615b305d20213d20310000000000000000000000000000000000000000000000600082015250565b6000610682600983610510565b915061068d8261064c565b602082019050919050565b600060208201905081810360008301526106b181610675565b9050919050565b7f615b315d20213d20320000000000000000000000000000000000000000000000600082015250565b60006106ee600983610510565b91506106f9826106b8565b602082019050919050565b6000602082019050818103600083015261071d816106e1565b9050919050565b7f615b325d20213d20330000000000000000000000000000000000000000000000600082015250565b600061075a600983610510565b915061076582610724565b602082019050919050565b600060208201905081810360008301526107898161074d565b9050919050565b7f615b335d20213d20340000000000000000000000000000000000000000000000600082015250565b60006107c6600983610510565b91506107d182610790565b602082019050919050565b600060208201905081810360008301526107f5816107b9565b9050919050565b7f615b345d20213d20350000000000000000000000000000000000000000000000600082015250565b6000610832600983610510565b915061083d826107fc565b602082019050919050565b6000602082019050818103600083015261086181610825565b9050919050565b7f615b355d20213d20360000000000000000000000000000000000000000000000600082015250565b600061089e600983610510565b91506108a982610868565b602082019050919050565b600060208201905081810360008301526108cd81610891565b9050919050565b7f615b365d20213d20370000000000000000000000000000000000000000000000600082015250565b600061090a600983610510565b9150610915826108d4565b602082019050919050565b60006020820190508181036000830152610939816108fd565b9050919050565b7f615b375d20213d20380000000000000000000000000000000000000000000000600082015250565b6000610976600983610510565b915061098182610940565b602082019050919050565b600060208201905081810360008301526109a581610969565b905091905056fea26469706673582212205e7a5ef1ad84c28d4cfbbd0cbe0ca7f0232df5dbf0c8885a9c063e982267597164736f6c63430008130033").unwrap(),
            "105:496:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;148:451;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;201:13;241:1;233;;235;233:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;225:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;282:1;274;;276;274:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;266:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;323:1;315;;317;315:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;307:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;364:1;356;;358;356:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;348:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;405:1;397;;399;397:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;389:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;446:1;438;;440;438:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;430:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;487:1;479;;481;479:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;471:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;528:1;520;;522;520:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;512:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;553:5;:3;:5::i;:::-;568:24;;;;;;;;;;;;;;;;;;;148:451;;;;:::o;25:185:0:-;46:10;83;67:28;;59:37;;46:50;;143:4;134:7;130:18;167:2;164:1;157:13;193:8;187:4;184:1;179:23;111:97;;25:185::o;88:117:2:-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:117;689:1;686;679:12;718:566;789:8;799:6;849:3;842:4;834:6;830:17;826:27;816:122;;857:79;;:::i;:::-;816:122;970:6;957:20;947:30;;1000:18;992:6;989:30;986:117;;;1022:79;;:::i;:::-;986:117;1136:4;1128:6;1124:17;1112:29;;1190:3;1182:4;1174:6;1170:17;1160:8;1156:32;1153:41;1150:128;;;1197:79;;:::i;:::-;1150:128;718:566;;;;;:::o;1290:555::-;1374:6;1382;1431:2;1419:9;1410:7;1406:23;1402:32;1399:119;;;1437:79;;:::i;:::-;1399:119;1585:1;1574:9;1570:17;1557:31;1615:18;1607:6;1604:30;1601:117;;;1637:79;;:::i;:::-;1601:117;1750:78;1820:7;1811:6;1800:9;1796:22;1750:78;:::i;:::-;1732:96;;;;1528:310;1290:555;;;;;:::o;1851:99::-;1903:6;1937:5;1931:12;1921:22;;1851:99;;;:::o;1956:169::-;2040:11;2074:6;2069:3;2062:19;2114:4;2109:3;2105:14;2090:29;;1956:169;;;;:::o;2131:246::-;2212:1;2222:113;2236:6;2233:1;2230:13;2222:113;;;2321:1;2316:3;2312:11;2306:18;2302:1;2297:3;2293:11;2286:39;2258:2;2255:1;2251:10;2246:15;;2222:113;;;2369:1;2360:6;2355:3;2351:16;2344:27;2193:184;2131:246;;;:::o;2383:102::-;2424:6;2475:2;2471:7;2466:2;2459:5;2455:14;2451:28;2441:38;;2383:102;;;:::o;2491:377::-;2579:3;2607:39;2640:5;2607:39;:::i;:::-;2662:71;2726:6;2721:3;2662:71;:::i;:::-;2655:78;;2742:65;2800:6;2795:3;2788:4;2781:5;2777:16;2742:65;:::i;:::-;2832:29;2854:6;2832:29;:::i;:::-;2827:3;2823:39;2816:46;;2583:285;2491:377;;;;:::o;2874:313::-;2987:4;3025:2;3014:9;3010:18;3002:26;;3074:9;3068:4;3064:20;3060:1;3049:9;3045:17;3038:47;3102:78;3175:4;3166:6;3102:78;:::i;:::-;3094:86;;2874:313;;;;:::o;3193:180::-;3241:77;3238:1;3231:88;3338:4;3335:1;3328:15;3362:4;3359:1;3352:15;3379:86;3414:7;3454:4;3447:5;3443:16;3432:27;;3379:86;;;:::o;3471:118::-;3542:22;3558:5;3542:22;:::i;:::-;3535:5;3532:33;3522:61;;3579:1;3576;3569:12;3522:61;3471:118;:::o;3595:135::-;3639:5;3677:6;3664:20;3655:29;;3693:31;3718:5;3693:31;:::i;:::-;3595:135;;;;:::o;3736:325::-;3793:6;3842:2;3830:9;3821:7;3817:23;3813:32;3810:119;;;3848:79;;:::i;:::-;3810:119;3968:1;3993:51;4036:7;4027:6;4016:9;4012:22;3993:51;:::i;:::-;3983:61;;3939:115;3736:325;;;;:::o;4067:159::-;4207:11;4203:1;4195:6;4191:14;4184:35;4067:159;:::o;4232:365::-;4374:3;4395:66;4459:1;4454:3;4395:66;:::i;:::-;4388:73;;4470:93;4559:3;4470:93;:::i;:::-;4588:2;4583:3;4579:12;4572:19;;4232:365;;;:::o;4603:419::-;4769:4;4807:2;4796:9;4792:18;4784:26;;4856:9;4850:4;4846:20;4842:1;4831:9;4827:17;4820:47;4884:131;5010:4;4884:131;:::i;:::-;4876:139;;4603:419;;;:::o;5028:159::-;5168:11;5164:1;5156:6;5152:14;5145:35;5028:159;:::o;5193:365::-;5335:3;5356:66;5420:1;5415:3;5356:66;:::i;:::-;5349:73;;5431:93;5520:3;5431:93;:::i;:::-;5549:2;5544:3;5540:12;5533:19;;5193:365;;;:::o;5564:419::-;5730:4;5768:2;5757:9;5753:18;5745:26;;5817:9;5811:4;5807:20;5803:1;5792:9;5788:17;5781:47;5845:131;5971:4;5845:131;:::i;:::-;5837:139;;5564:419;;;:::o;5989:159::-;6129:11;6125:1;6117:6;6113:14;6106:35;5989:159;:::o;6154:365::-;6296:3;6317:66;6381:1;6376:3;6317:66;:::i;:::-;6310:73;;6392:93;6481:3;6392:93;:::i;:::-;6510:2;6505:3;6501:12;6494:19;;6154:365;;;:::o;6525:419::-;6691:4;6729:2;6718:9;6714:18;6706:26;;6778:9;6772:4;6768:20;6764:1;6753:9;6749:17;6742:47;6806:131;6932:4;6806:131;:::i;:::-;6798:139;;6525:419;;;:::o;6950:159::-;7090:11;7086:1;7078:6;7074:14;7067:35;6950:159;:::o;7115:365::-;7257:3;7278:66;7342:1;7337:3;7278:66;:::i;:::-;7271:73;;7353:93;7442:3;7353:93;:::i;:::-;7471:2;7466:3;7462:12;7455:19;;7115:365;;;:::o;7486:419::-;7652:4;7690:2;7679:9;7675:18;7667:26;;7739:9;7733:4;7729:20;7725:1;7714:9;7710:17;7703:47;7767:131;7893:4;7767:131;:::i;:::-;7759:139;;7486:419;;;:::o;7911:159::-;8051:11;8047:1;8039:6;8035:14;8028:35;7911:159;:::o;8076:365::-;8218:3;8239:66;8303:1;8298:3;8239:66;:::i;:::-;8232:73;;8314:93;8403:3;8314:93;:::i;:::-;8432:2;8427:3;8423:12;8416:19;;8076:365;;;:::o;8447:419::-;8613:4;8651:2;8640:9;8636:18;8628:26;;8700:9;8694:4;8690:20;8686:1;8675:9;8671:17;8664:47;8728:131;8854:4;8728:131;:::i;:::-;8720:139;;8447:419;;;:::o;8872:159::-;9012:11;9008:1;9000:6;8996:14;8989:35;8872:159;:::o;9037:365::-;9179:3;9200:66;9264:1;9259:3;9200:66;:::i;:::-;9193:73;;9275:93;9364:3;9275:93;:::i;:::-;9393:2;9388:3;9384:12;9377:19;;9037:365;;;:::o;9408:419::-;9574:4;9612:2;9601:9;9597:18;9589:26;;9661:9;9655:4;9651:20;9647:1;9636:9;9632:17;9625:47;9689:131;9815:4;9689:131;:::i;:::-;9681:139;;9408:419;;;:::o;9833:159::-;9973:11;9969:1;9961:6;9957:14;9950:35;9833:159;:::o;9998:365::-;10140:3;10161:66;10225:1;10220:3;10161:66;:::i;:::-;10154:73;;10236:93;10325:3;10236:93;:::i;:::-;10354:2;10349:3;10345:12;10338:19;;9998:365;;;:::o;10369:419::-;10535:4;10573:2;10562:9;10558:18;10550:26;;10622:9;10616:4;10612:20;10608:1;10597:9;10593:17;10586:47;10650:131;10776:4;10650:131;:::i;:::-;10642:139;;10369:419;;;:::o;10794:159::-;10934:11;10930:1;10922:6;10918:14;10911:35;10794:159;:::o;10959:365::-;11101:3;11122:66;11186:1;11181:3;11122:66;:::i;:::-;11115:73;;11197:93;11286:3;11197:93;:::i;:::-;11315:2;11310:3;11306:12;11299:19;;10959:365;;;:::o;11330:419::-;11496:4;11534:2;11523:9;11519:18;11511:26;;11583:9;11577:4;11573:20;11569:1;11558:9;11554:17;11547:47;11611:131;11737:4;11611:131;:::i;:::-;11603:139;;11330:419;;;:::o".parse().unwrap(),
            &vec![
                String::from("solidity_utils/lib.sol"),
                String::from("tests/complex-condition/test.sol"),
            ]
        );

        for (idx, srcmap) in res {
            if srcmap.file.is_some() {
                debug!("{}: {:?}", idx, srcmap);
            }
        }
    }

    #[test]
    fn test_decode_instruction_with_replacement() {
        let res = decode_instructions_with_replacement(
            hex::decode("608060405234801561001057600080fd5b506004361061002b5760003560e01c8063051ee71f14610030575b600080fd5b61004a600480360381019061004591906104b8565b610060565b6040516100579190610595565b60405180910390f35b6060600083836000818110610078576100776105b7565b5b905060200201602081019061008d919061061f565b60ff16036100d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c790610698565b60405180910390fd5b6000838360018181106100e6576100e56105b7565b5b90506020020160208101906100fb919061061f565b60ff160361013e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013590610704565b60405180910390fd5b600083836002818110610154576101536105b7565b5b9050602002016020810190610169919061061f565b60ff16036101ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a390610770565b60405180910390fd5b6004838360038181106101c2576101c16105b7565b5b90506020020160208101906101d7919061061f565b60ff161461021a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610211906107dc565b60405180910390fd5b6005838360048181106102305761022f6105b7565b5b9050602002016020810190610245919061061f565b60ff1614610288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027f90610848565b60405180910390fd5b60058383600581811061029e5761029d6105b7565b5b90506020020160208101906102b3919061061f565b60ff16146102f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ed906108b4565b60405180910390fd5b60078383600681811061030c5761030b6105b7565b5b9050602002016020810190610321919061061f565b60ff1614610364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035b90610920565b60405180910390fd5b60088383600781811061037a576103796105b7565b5b905060200201602081019061038f919061061f565b60ff16146103d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c99061098c565b60405180910390fd5b6103da610418565b6040518060400160405280600f81526020017f48656c6c6f20436f6e7472616374730000000000000000000000000000000000815250905092915050565b60003373ffffffffffffffffffffffffffffffffffffffff1660001b90506020590181815262133337602082a15050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261047857610477610453565b5b8235905067ffffffffffffffff81111561049557610494610458565b5b6020830191508360208202830111156104b1576104b061045d565b5b9250929050565b600080602083850312156104cf576104ce610449565b5b600083013567ffffffffffffffff8111156104ed576104ec61044e565b5b6104f985828601610462565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561053f578082015181840152602081019050610524565b60008484015250505050565b6000601f19601f8301169050919050565b600061056782610505565b6105718185610510565b9350610581818560208601610521565b61058a8161054b565b840191505092915050565b600060208201905081810360008301526105af818461055c565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff82169050919050565b6105fc816105e6565b811461060757600080fd5b50565b600081359050610619816105f3565b92915050565b60006020828403121561063557610634610449565b5b60006106438482850161060a565b91505092915050565b7f615b305d20213d20310000000000000000000000000000000000000000000000600082015250565b6000610682600983610510565b915061068d8261064c565b602082019050919050565b600060208201905081810360008301526106b181610675565b9050919050565b7f615b315d20213d20320000000000000000000000000000000000000000000000600082015250565b60006106ee600983610510565b91506106f9826106b8565b602082019050919050565b6000602082019050818103600083015261071d816106e1565b9050919050565b7f615b325d20213d20330000000000000000000000000000000000000000000000600082015250565b600061075a600983610510565b915061076582610724565b602082019050919050565b600060208201905081810360008301526107898161074d565b9050919050565b7f615b335d20213d20340000000000000000000000000000000000000000000000600082015250565b60006107c6600983610510565b91506107d182610790565b602082019050919050565b600060208201905081810360008301526107f5816107b9565b9050919050565b7f615b345d20213d20350000000000000000000000000000000000000000000000600082015250565b6000610832600983610510565b915061083d826107fc565b602082019050919050565b6000602082019050818103600083015261086181610825565b9050919050565b7f615b355d20213d20360000000000000000000000000000000000000000000000600082015250565b600061089e600983610510565b91506108a982610868565b602082019050919050565b600060208201905081810360008301526108cd81610891565b9050919050565b7f615b365d20213d20370000000000000000000000000000000000000000000000600082015250565b600061090a600983610510565b9150610915826108d4565b602082019050919050565b60006020820190508181036000830152610939816108fd565b9050919050565b7f615b375d20213d20380000000000000000000000000000000000000000000000600082015250565b6000610976600983610510565b915061098182610940565b602082019050919050565b600060208201905081810360008301526109a581610969565b905091905056fea26469706673582212205e7a5ef1ad84c28d4cfbbd0cbe0ca7f0232df5dbf0c8885a9c063e982267597164736f6c63430008130033").unwrap(),
            &[("105:496:1".to_string(), "1:1:0".to_string()), ("148:451:1".to_string(), "1:1:1".to_string())],
            "105:496:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;148:451;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;201:13;241:1;233;;235;233:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;225:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;282:1;274;;276;274:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;266:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;323:1;315;;317;315:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;307:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;364:1;356;;358;356:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;348:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;405:1;397;;399;397:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;389:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;446:1;438;;440;438:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;430:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;487:1;479;;481;479:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;471:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;528:1;520;;522;520:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;:9;;;512:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;553:5;:3;:5::i;:::-;568:24;;;;;;;;;;;;;;;;;;;148:451;;;;:::o;25:185:0:-;46:10;83;67:28;;59:37;;46:50;;143:4;134:7;130:18;167:2;164:1;157:13;193:8;187:4;184:1;179:23;111:97;;25:185::o;88:117:2:-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:117;689:1;686;679:12;718:566;789:8;799:6;849:3;842:4;834:6;830:17;826:27;816:122;;857:79;;:::i;:::-;816:122;970:6;957:20;947:30;;1000:18;992:6;989:30;986:117;;;1022:79;;:::i;:::-;986:117;1136:4;1128:6;1124:17;1112:29;;1190:3;1182:4;1174:6;1170:17;1160:8;1156:32;1153:41;1150:128;;;1197:79;;:::i;:::-;1150:128;718:566;;;;;:::o;1290:555::-;1374:6;1382;1431:2;1419:9;1410:7;1406:23;1402:32;1399:119;;;1437:79;;:::i;:::-;1399:119;1585:1;1574:9;1570:17;1557:31;1615:18;1607:6;1604:30;1601:117;;;1637:79;;:::i;:::-;1601:117;1750:78;1820:7;1811:6;1800:9;1796:22;1750:78;:::i;:::-;1732:96;;;;1528:310;1290:555;;;;;:::o;1851:99::-;1903:6;1937:5;1931:12;1921:22;;1851:99;;;:::o;1956:169::-;2040:11;2074:6;2069:3;2062:19;2114:4;2109:3;2105:14;2090:29;;1956:169;;;;:::o;2131:246::-;2212:1;2222:113;2236:6;2233:1;2230:13;2222:113;;;2321:1;2316:3;2312:11;2306:18;2302:1;2297:3;2293:11;2286:39;2258:2;2255:1;2251:10;2246:15;;2222:113;;;2369:1;2360:6;2355:3;2351:16;2344:27;2193:184;2131:246;;;:::o;2383:102::-;2424:6;2475:2;2471:7;2466:2;2459:5;2455:14;2451:28;2441:38;;2383:102;;;:::o;2491:377::-;2579:3;2607:39;2640:5;2607:39;:::i;:::-;2662:71;2726:6;2721:3;2662:71;:::i;:::-;2655:78;;2742:65;2800:6;2795:3;2788:4;2781:5;2777:16;2742:65;:::i;:::-;2832:29;2854:6;2832:29;:::i;:::-;2827:3;2823:39;2816:46;;2583:285;2491:377;;;;:::o;2874:313::-;2987:4;3025:2;3014:9;3010:18;3002:26;;3074:9;3068:4;3064:20;3060:1;3049:9;3045:17;3038:47;3102:78;3175:4;3166:6;3102:78;:::i;:::-;3094:86;;2874:313;;;;:::o;3193:180::-;3241:77;3238:1;3231:88;3338:4;3335:1;3328:15;3362:4;3359:1;3352:15;3379:86;3414:7;3454:4;3447:5;3443:16;3432:27;;3379:86;;;:::o;3471:118::-;3542:22;3558:5;3542:22;:::i;:::-;3535:5;3532:33;3522:61;;3579:1;3576;3569:12;3522:61;3471:118;:::o;3595:135::-;3639:5;3677:6;3664:20;3655:29;;3693:31;3718:5;3693:31;:::i;:::-;3595:135;;;;:::o;3736:325::-;3793:6;3842:2;3830:9;3821:7;3817:23;3813:32;3810:119;;;3848:79;;:::i;:::-;3810:119;3968:1;3993:51;4036:7;4027:6;4016:9;4012:22;3993:51;:::i;:::-;3983:61;;3939:115;3736:325;;;;:::o;4067:159::-;4207:11;4203:1;4195:6;4191:14;4184:35;4067:159;:::o;4232:365::-;4374:3;4395:66;4459:1;4454:3;4395:66;:::i;:::-;4388:73;;4470:93;4559:3;4470:93;:::i;:::-;4588:2;4583:3;4579:12;4572:19;;4232:365;;;:::o;4603:419::-;4769:4;4807:2;4796:9;4792:18;4784:26;;4856:9;4850:4;4846:20;4842:1;4831:9;4827:17;4820:47;4884:131;5010:4;4884:131;:::i;:::-;4876:139;;4603:419;;;:::o;5028:159::-;5168:11;5164:1;5156:6;5152:14;5145:35;5028:159;:::o;5193:365::-;5335:3;5356:66;5420:1;5415:3;5356:66;:::i;:::-;5349:73;;5431:93;5520:3;5431:93;:::i;:::-;5549:2;5544:3;5540:12;5533:19;;5193:365;;;:::o;5564:419::-;5730:4;5768:2;5757:9;5753:18;5745:26;;5817:9;5811:4;5807:20;5803:1;5792:9;5788:17;5781:47;5845:131;5971:4;5845:131;:::i;:::-;5837:139;;5564:419;;;:::o;5989:159::-;6129:11;6125:1;6117:6;6113:14;6106:35;5989:159;:::o;6154:365::-;6296:3;6317:66;6381:1;6376:3;6317:66;:::i;:::-;6310:73;;6392:93;6481:3;6392:93;:::i;:::-;6510:2;6505:3;6501:12;6494:19;;6154:365;;;:::o;6525:419::-;6691:4;6729:2;6718:9;6714:18;6706:26;;6778:9;6772:4;6768:20;6764:1;6753:9;6749:17;6742:47;6806:131;6932:4;6806:131;:::i;:::-;6798:139;;6525:419;;;:::o;6950:159::-;7090:11;7086:1;7078:6;7074:14;7067:35;6950:159;:::o;7115:365::-;7257:3;7278:66;7342:1;7337:3;7278:66;:::i;:::-;7271:73;;7353:93;7442:3;7353:93;:::i;:::-;7471:2;7466:3;7462:12;7455:19;;7115:365;;;:::o;7486:419::-;7652:4;7690:2;7679:9;7675:18;7667:26;;7739:9;7733:4;7729:20;7725:1;7714:9;7710:17;7703:47;7767:131;7893:4;7767:131;:::i;:::-;7759:139;;7486:419;;;:::o;7911:159::-;8051:11;8047:1;8039:6;8035:14;8028:35;7911:159;:::o;8076:365::-;8218:3;8239:66;8303:1;8298:3;8239:66;:::i;:::-;8232:73;;8314:93;8403:3;8314:93;:::i;:::-;8432:2;8427:3;8423:12;8416:19;;8076:365;;;:::o;8447:419::-;8613:4;8651:2;8640:9;8636:18;8628:26;;8700:9;8694:4;8690:20;8686:1;8675:9;8671:17;8664:47;8728:131;8854:4;8728:131;:::i;:::-;8720:139;;8447:419;;;:::o;8872:159::-;9012:11;9008:1;9000:6;8996:14;8989:35;8872:159;:::o;9037:365::-;9179:3;9200:66;9264:1;9259:3;9200:66;:::i;:::-;9193:73;;9275:93;9364:3;9275:93;:::i;:::-;9393:2;9388:3;9384:12;9377:19;;9037:365;;;:::o;9408:419::-;9574:4;9612:2;9601:9;9597:18;9589:26;;9661:9;9655:4;9651:20;9647:1;9636:9;9632:17;9625:47;9689:131;9815:4;9689:131;:::i;:::-;9681:139;;9408:419;;;:::o;9833:159::-;9973:11;9969:1;9961:6;9957:14;9950:35;9833:159;:::o;9998:365::-;10140:3;10161:66;10225:1;10220:3;10161:66;:::i;:::-;10154:73;;10236:93;10325:3;10236:93;:::i;:::-;10354:2;10349:3;10345:12;10338:19;;9998:365;;;:::o;10369:419::-;10535:4;10573:2;10562:9;10558:18;10550:26;;10622:9;10616:4;10612:20;10608:1;10597:9;10593:17;10586:47;10650:131;10776:4;10650:131;:::i;:::-;10642:139;;10369:419;;;:::o;10794:159::-;10934:11;10930:1;10922:6;10918:14;10911:35;10794:159;:::o;10959:365::-;11101:3;11122:66;11186:1;11181:3;11122:66;:::i;:::-;11115:73;;11197:93;11286:3;11197:93;:::i;:::-;11315:2;11310:3;11306:12;11299:19;;10959:365;;;:::o;11330:419::-;11496:4;11534:2;11523:9;11519:18;11511:26;;11583:9;11577:4;11573:20;11569:1;11558:9;11554:17;11547:47;11611:131;11737:4;11611:131;:::i;:::-;11603:139;;11330:419;;;:::o".parse().unwrap(),
            &vec![
                String::from("solidity_utils/lib.sol"),
                String::from("tests/complex-condition/test.sol"),
            ]
        );

        for (idx, srcmap) in res.iter().sorted_by_key(|(idx, _)| *idx) {
            if srcmap.file.is_some() {
                debug!("{}: {:?}", idx, srcmap);
            }
        }
    }
}
