// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";

// ityfuzz evm -o -t {{target}} -c {{chain}} --onchain-block-number {{block_number}} -f -i -p --onchain-etherscan-api-key ${{etherscan_keyname}}
/*

ðŸ˜ŠðŸ˜Š Found violations!


{{{solution}}}
 */

{{#if is_borrow}}
interface IUniswapV2Router {
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}
{{/if}}

contract EGD is Test {
    function setUp() public {
        vm.createSelectFork("{{chain}}"{{#if block_number}}, {{block_number}}{{/if}});
    }

    function test() public {
        vm.prank(address(this), address(this));
{{#each trace}}

    {{#with this}}
        {{#if is_borrow}}
        // borrow token {{contract}} with {{value}} ETH, liq percent: {{liq_percent}}
        {{/if}}
        {{#unless is_borrow}}
        {{contract}}.call{{#if value}}{value: {{value}}}{{/if}}(abi.encodeWithSelector(
            {{fn_selector}}{{#if fn_args}},{{fn_args}}{{/if}}
        ));
        {{#if liq_percent}}
        // swap todo: liq_percent: {{liq_percent}}
        {{/if}}
        {{/unless}}
    {{/with}}
{{/each}}
    }

{{#if stepping_with_return}}
    // Stepping with return
    receive() external payable {}
{{/if}}
}
